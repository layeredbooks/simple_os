
Simple\_OS applications

If you have questions or comments, please contact
Ola Dahl - dahl.ola@gmail.com

#+AUTHOR: Ola Dahl
#+EMAIL: dahl dot ola at gmail dot com
#+OPTIONS: num:nil email:nil

* Simple\_OS applications 

The following application directories are available: 
- barber/console - a Sleeping barber program with text output
- barber/gui - a Sleeping barber program with GUI communication
- hello\_console - a hello world program with text output
- hello\_gui - a hello world program with GUI communication

* Build on a Linux host 

There are Linux host makefiles available in the application directories: 
- Makefile\_32 - for Linux 32-bit hosts

In some application directories, the application is prepared for execution 
also on an [[http://www.arm.com][ARM]] target ([[http://www.beagleboard.org][Beagleboard]], running Simple\_OS). For these
applications, there is a makefile for ARM in the application
directory: 
- Makefile\_arm\_bb - for ARM target on Beagleboard

* Build on a Windows host 

The directory 

: win\vs_cpp_2010_express\simple_os_prog

contains a Visual Studio Express project file, which can 
be used when applications shall be built and executed using Windows

* Linux host - create new applicaton 

If you want to create a new application and you use a Linux host, a shell script 
is available, and can be used, e.g. like 

: source start_new_app_32.sh my_app

for creating a directory my\_app, with src and obj directories created, and with 
symbolic links to Makefile\_32 and rules.mk automatically created. 

Then, store your source files in the src subdirectory of your new directory (my\_app 
in this case), and using 

: make -f Makefile_32 

your application can be built for Linux host. 

If you want to build for Linux 64-bit then create a symbolic link to the Makefile\_64
file, in the same way as the link to Makefile\_32 was created (see the file 
start\_new\_app\_32.sh for information about this). 

If you want to build for ARM you need a cross compiler. Simple\_OS is prepared for use with
CodeSourcery's ARM compiler on a Linux host. 

The ARM compiler can be downloaded and installed as described on [[http://theintobooks.wordpress.com/2012/10/11/installing-an-arm-cross-compiler-on-ubuntu/][this post on the Intobooks blog]].

Provided you have access to this compiler (or another one, but then you need to verify 
yourself that it can be used to build Simple\_OS and Simple\_OS applications), a build
for ARM can be done by creating a symbolic link to Makefile\_arm\_bb, and then using 

: make -f Makefile_arm_bb

for compilation and linking. This results in a file prog\_arm\_bb.srec, which then 
can be downloaded to a Beagleboard using e.g. gtkterm. 

* Windows host - create new application

If you want to create a new application and you use a Windows host, please create a new
subdirectory where your sourcefiles are stored. Then, use the already available 
Visual Studio project (the simple\_os\_prog.sln file), and include your source files into 
this project (and if needed, remove source files belonging to any one of the applications 
mentioned above from the project)

NOTE: when removing old source files and adding new files to a project, it is advised to do 
a complete rebuild the first time the new source files are compiled. This is achived using 
the command 

: Ctrl-Alt-F7


